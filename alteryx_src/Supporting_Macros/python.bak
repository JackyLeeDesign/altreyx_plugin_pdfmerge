<?xml version="1.0"?>
<AlteryxDocument yxmdVer="2020.4">
  <Nodes>
    <Node ToolID="1">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.Tab.Tab">
        <Position x="0" y="0" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="2">
      <GuiSettings Plugin="AlteryxBasePluginsGui.MacroInput.MacroInput">
        <Position x="90" y="462" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <UseFileInput value="False" />
          <Name>Input2</Name>
          <Abbrev />
          <ShowFieldMap value="True" />
          <Optional value="True" />
          <TextInput>
            <Configuration>
              <NumRows value="1" />
              <Fields>
                <Field name="connect_input_path" />
                <Field name="pwc_input_path" />
                <Field name="input_page" />
                <Field name="input_isTodoAll" />
                <Field name="input_isConnectFile" />
                <Field name="input_isNeedAnnot" />
                <Field name="input_isNeedWatermark" />
                <Field name="input_annot" />
                <Field name="input_watermark" />
              </Fields>
              <Data>
                <r>
                  <c>none</c>
                  <c>C:\Users\JYKL\Desktop\New folder (3)\明揚.2019.pdf</c>
                  <c>2</c>
                  <c>False</c>
                  <c>False</c>
                  <c>False</c>
                  <c>True</c>
                  <c>本資料係稿本@，僅供參考，不得移作其他用途</c>
                  <c>C:\Users\JYKL\AppData\Roaming\Alteryx\Tools\PDFWatermark\Supporting_Macros\watermark.png</c>
                </r>
              </Data>
            </Configuration>
          </TextInput>
        </Configuration>
        <Annotation DisplayMode="1">
          <Name />
          <DefaultAnnotationText>Input</DefaultAnnotationText>
          <Left value="True" />
        </Annotation>
        <MetaInfo connection="Output">
          <RecordInfo>
            <Field name="connect_input_path" size="4" source="TextInput:" type="String" />
            <Field name="pwc_input_path" size="48" source="TextInput:" type="WString" />
            <Field name="input_page" source="TextInput:" type="Byte" />
            <Field name="input_isTodoAll" source="TextInput:" type="Bool" />
            <Field name="input_isConnectFile" source="TextInput:" type="Bool" />
            <Field name="input_isNeedAnnot" source="TextInput:" type="Bool" />
            <Field name="input_isNeedWatermark" source="TextInput:" type="Bool" />
            <Field name="input_annot" size="21" source="TextInput:" type="WString" />
            <Field name="input_watermark" size="88" source="TextInput:" type="String" />
          </RecordInfo>
        </MetaInfo>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxMacroInput" />
    </Node>
    <Node ToolID="3">
      <GuiSettings Plugin="AlteryxBasePluginsGui.MacroOutput.MacroOutput">
        <Position x="342" y="438" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Name>Output4</Name>
          <Abbrev />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>python output</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxBasePluginsEngine.dll" EngineDllEntryPoint="AlteryxMacroOutput" />
    </Node>
    <Node ToolID="4">
      <GuiSettings Plugin="AlteryxGuiToolkit.Questions.ControlParam.ControlParam">
        <Position x="138" y="246" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>runpython</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="5">
      <GuiSettings Plugin="AlteryxGuiToolkit.Action.Action">
        <Position x="150" y="330" width="59" height="59" />
      </GuiSettings>
      <Properties>
        <Configuration />
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText>Update Value</DefaultAnnotationText>
          <Left value="False" />
        </Annotation>
      </Properties>
    </Node>
    <Node ToolID="7">
      <GuiSettings Plugin="AlteryxGuiToolkit.ToolContainer.ToolContainer">
        <Position x="184" y="413" width="121" height="50" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <Caption>Python</Caption>
          <Style TextColor="#314c4a" FillColor="#ecf2f2" BorderColor="#314c4a" Transparency="25" Margin="25" />
          <Disabled value="False" />
          <Folded value="False" />
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <ChildNodes />
    </Node>
    <Node ToolID="6">
      <GuiSettings Plugin="JupyterCode">
        <Position x="198" y="462" />
      </GuiSettings>
      <Properties>
        <Configuration>
          <WorkflowName>c:\users\jykl\desktop\alteryx\altreyx_ait_components\altreyx_plugin_pdfmerge\alteryx_src\supporting_macros\python.yxmd</WorkflowName>
          <JupyterProduction>false</JupyterProduction>
          <vEnvName>jupytertool_venv</vEnvName>
          <DefaultVenv>1</DefaultVenv>
          <productionModeScript>#################################
# List all non-standard packages to be imported by your 
# script here (only missing packages will be installed)
from ayx import Package
try:
    Package.installPackages(package=['pandas','pymupdf'], install_type="install --user")
except:
    pass


#################################
from ayx import Alteryx
from datetime import datetime
import pandas as pd
import os
import fitz
from PIL import Image
input_data = Alteryx.read("#1")
try:
    pdf_result=""
    # 讀取參數設定
    input_isConnectFile = input_data['input_isConnectFile'].iloc[0]
    if (input_isConnectFile==True):
        pdf_list = input_data['connect_input_path']
    else:
        pdf_list = input_data['pwc_input_path']
    annot_list = input_data['input_annot']
    watermark_pic_path = input_data['input_watermark'].iloc[0]
    isNeedAnnot = input_data['input_isNeedAnnot'].iloc[0]
    isNeedWatermark = input_data['input_isNeedWatermark'].iloc[0]
    # 宣告輸出結果之pandas表格
    resultTemplate = {
        "Source File": pdf_list,
        "Status":"",
        "Message":"",
        "Output Path":""
    }
    resultData = pd.DataFrame(resultTemplate)
    for index_file in range(len(pdf_list)):
        try:
            pdf_result=""
            content_pdf = pdf_list[index_file]
            # 檔案若存在則合併,反之則標示錯誤並顯示錯誤訊息
            isExist = os.path.exists(content_pdf)
            if(isExist == True):
                # 輸出結果之檔名判斷，若已存在則補序號
                file = os.path.splitext(content_pdf)[0]
                ext = os.path.splitext(content_pdf)[1]
                pdf_result=f'{file}_watermark{ext}'
                i = 2
                while os.path.exists(pdf_result):
                    pdf_result = f'{file}_watermark({i}){ext}'
                    i += 1
                # 添加浮水印
                # 是否處理所有頁數，目前預設為"是"
                page_indices= "ALL"
                # reader = PdfReader(content_pdf)
                if page_indices == "ALL":

                    # 接著開始處理文件頭提示
                    black  = (0,0,0)
                    # 字段切割處理
                    strContent = annot_list[index_file]
                    strContentSplit = strContent.split("@")
                    isContainDate = '@' in strContent
                    strPart1=""
                    strPart2=""
                    if(len(strContentSplit)==2):
                        strPart1=strContentSplit[0]
                        strPart2=strContentSplit[1]
                    if(len(strContentSplit)==1):
                        strPart1=strContentSplit[0]

                    # 獲取當前日期
                    currentDateAndTime = datetime.now()
                    year = str(currentDateAndTime.year)
                    month = str(currentDateAndTime.month)
                    day = str(currentDateAndTime.day)
                    hour = str(currentDateAndTime.hour)
                    minute = str(currentDateAndTime.minute)
                    second = str(currentDateAndTime.second)
                    strTime="(" + year + "." + month + "." + day + " " + hour + ":" + minute + ":" + second + ")"

                    pdfDoc = fitz.open(content_pdf)
                    for page in pdfDoc:
                        # 獲取當前頁面旋轉角度
                        currentRotation = page.rotation
                        page.clean_contents()
                        # 獲取原頁面高度與寬度
                        page.set_rotation(0)
                        # 寬度
                        ori_total_width = page.rect.x1
                        # 高度
                        ori_total_height = page.rect.y1
                        page.set_rotation(currentRotation)

                        total_width  = ori_total_width
                        total_height = ori_total_height

                        # 提示字段Part1寬度
                        strPart1_width = len(strPart1)*8
                        # 提示字段Part2寬度
                        strPart2_width = len(strPart2)*8
                        # 時間字段寬度
                        strTime_width = len(strTime)*5
                        # 提示字段總寬度
                        total_str_width = strPart1_width + strPart2_width + strTime_width

                        # 字段之間的間距
                        rect_margin = 5
                        # 框線與字的間距
                        rect_border_margin = 8
                        # 文字框高度
                        rect_height = 8
                        # 文字框距離文件上方高度
                        rect_top = 20
                        
                        # 計算浮水印調整角度與各點座標調整變量
                        adjustRotation = 0
                        # if currentRotation == 90:
                        #     total_width = ori_total_height
                        #     total_height = ori_total_width
                        #     adjustRotation = currentRotation
                        
                        # 最大可填字數計算
                        # print((total_width-strTime_width-rect_border_margin*2-rect_margin*4)/8)

                        # 計算part1文字框的 P1(x,y), P2(x,y)座標
                        rect1_x1 = (total_width-total_str_width)/2
                        rect1_y1 = rect_top
                        rect1_x2 = rect1_x1 + strPart1_width + rect_margin
                        rect1_y2 = rect_top + rect_height
                        rect1_p1 = fitz.Point(rect1_x1,rect1_y1) #* page.derotation_matrix
                        rect1_p2 = fitz.Point(rect1_x2,rect1_y2) #* page.derotation_matrix
                        rect1 = fitz.Rect(rect1_p1.x,rect1_p1.y,rect1_p2.x,rect1_p2.y)

                        # 計算time文字框的 P1(x,y), P2(x,y)座標
                        rect_time_x1 = rect1_x2
                        rect_time_y1 = rect_top
                        rect_time_x2 = rect_time_x1 + strTime_width + rect_margin
                        rect_time_y2 = rect_top + rect_height
                        rect_time_p1 = fitz.Point(rect_time_x1,rect_time_y1) #* page.derotation_matrix
                        rect_time_p2 = fitz.Point(rect_time_x2,rect_time_y2) #* page.derotation_matrix
                        rect_time = fitz.Rect(rect_time_p1.x,rect_time_p1.y,rect_time_p2.x,rect_time_p2.y)

                        # 計算part2文字框的 P1(x,y), P2(x,y)座標
                        rect2_x1 = rect_time_x2
                        rect2_y1 = rect_top
                        rect2_x2 = rect2_x1 + strPart2_width + rect_margin
                        rect2_y2 = rect_top + rect_height
                        rect2_p1 = fitz.Point(rect2_x1,rect2_y1) #* page.derotation_matrix
                        rect2_p2 = fitz.Point(rect2_x2,rect2_y2) #* page.derotation_matrix
                        rect2 = fitz.Rect(rect2_p1.x,rect2_p1.y,rect2_p2.x,rect2_p2.y)

                        # 外框
                        rect_border_x1 = rect1_x1 - rect_border_margin
                        rect_border_y1 = rect_top - rect_border_margin
                        rect_border_x2 = rect2_x2 - rect_margin + rect_border_margin
                        rect_border_y2 = rect_top + rect_height + rect_border_margin
                        rect_border_p1 = fitz.Point(rect_border_x1,rect_border_y1) #* page.derotation_matrix
                        rect_border_p2 = fitz.Point(rect_border_x2,rect_border_y2) #* page.derotation_matrix
                        rect_border = fitz.Rect(rect_border_p1.x,rect_border_p1.y,rect_border_p2.x,rect_border_p2.y)

                        # 浮水印
                        # 獲取浮水印圖片寬度與高度
                        # with Image.open(watermark_pic_path) as image:
                        #     watermark_pic_width, watermark_pic_height = image.size
                        # print(watermark_pic_width)
                        # print(watermark_pic_height)
                        # 浮水印寬度
                        watermark_width = 360
                        # 浮水印高度
                        watermark_height = 72
                        watermark_x1 = (total_width-watermark_width)/2
                        watermark_y1 = (total_height-watermark_height)/2
                        watermark_x2 = watermark_x1 + watermark_width
                        watermark_y2 = watermark_y1 + watermark_height
                        watermark_p1 = fitz.Point(watermark_x1,watermark_y1) #* page.derotation_matrix
                        watermark_p2 = fitz.Point(watermark_x2,watermark_y2) #* page.derotation_matrix
                        rect_watermark = fitz.Rect(watermark_p1.x,watermark_p1.y,watermark_p2.x,watermark_p2.y)
                        watermark_pic = open(watermark_pic_path, "rb").read()
                        # shape = page.new_shape()
                        # # draw the insertion points as red, filled dots
                        # shape.draw_rect(rect1)
                        # shape.draw_rect(rect2)
                        # shape.draw_rect(rect_time)
                        # shape.draw_rect(rect_border)
                        # shape.finish(width=0.3, color=(1,0,0), fill=(1,0,0))
                        # # store our work to the page
                        # shape.commit()

                        # 添加外框
                        if(isNeedAnnot):
                            annot_border = page.add_rect_annot(rect_border)
                            annot_border.set_border(width=0.5)
                            annot_border.set_colors(stroke=black)
                            annot_border.set_rotation(adjustRotation)
                            annot_border.update()
                            if(strPart1):
                                # 添加第一部分字段(日期前字段)
                                annot_part1 = page.add_freetext_annot(rect1, strPart1,fontsize=8,fontname="china-t",text_color=black,align=fitz.TEXT_ALIGN_CENTER)
                            if(isContainDate):
                                # 添加日期字段
                                annot_time = page.add_freetext_annot(rect_time, strTime,fontsize=8,fontname="cour",text_color=black,align=fitz.TEXT_ALIGN_CENTER)
                            if(strPart2):
                                # 添加第二部分字段(日期後字段)
                                annot_part2 = page.add_freetext_annot(rect2, strPart2,fontsize=8,fontname="china-t",text_color=black,align=fitz.TEXT_ALIGN_CENTER)
                        if(isNeedWatermark):
                            # 添加圖片浮水印
                            page.insert_image(rect_watermark, stream = watermark_pic)
                    pdfDoc.save(pdf_result)
                    pdfDoc.close()

                    # 顯示成功與否
                    resultData.at[index_file, "Status"] = "Success"
                    resultData.at[index_file, "Message"] = "-"
                    resultData.at[index_file, "Output Path"] = pdf_result
            else:
                raise Exception("該檔案不存在，或路徑輸入錯誤，請確認後再重新執行 ! " + pdf_list[index_file])
        # 擷取個別檔案進行浮水印轉換時發生的錯誤
        except Exception as e:
            # 顯示成功與否
            resultData.at[index_file, "Status"] = "Failure"
            resultData.at[index_file, "Message"] = str(e)
            resultData.at[index_file, "Output Path"] = "-"
            if(pdf_result and os.path.exists(pdf_result)):
                os.remove(pdf_result)

# 擷取系統錯誤，若錯誤則所有檔案都顯示失敗
except Exception as e:
    # 顯示成功與否
    resultData["Status"] = "Failure"
    resultData["Message"] = "Alteryx 解析 PDF 過程發生錯誤，請與 AI&amp;T 同仁聯繫("+str(e)+")"
    resultData["Output Path"] = "-"
    if(pdf_result and os.path.exists(pdf_result)):
        os.remove(pdf_result)
Alteryx.write(resultData,1)
# Copyright © 2001-2022 Python Software Foundation; All Rights Reserved.


#################################
</productionModeScript>
          <Port>64190</Port>
          <JupyterGuidDir>abb8e49b-2e41-4043-80ae-aeb6ca3dda9a</JupyterGuidDir>
          <JupyterGuidCopy />
          <LastExecutedByEngineVersion>2020.4.5.12471</LastExecutedByEngineVersion>
          <Notebook><![CDATA[{"cells":[{"cell_type":"markdown","metadata":{"ayx":{"cell_class":"text_cell","cell_css":"border: 3px solid #357; margin: 4px; background: #fbffff","cell_type":"markdown","contents_keyword":"Alteryx.help()","first_line":"Run `Alteryx.help()` for info about useful functions.","label":"info"}},"source":["Run `Alteryx.help()` for info about useful functions.  \n","i.e., `Alteryx.read(\"#1\")`, `Alteryx.write(df,1)`, `Alteryx.getWorkflowConstant(\"Engine.WorkflowDirectory\")`"]},{"cell_type":"code","execution_count":1,"metadata":{"ayx":{"cell_class":"code_cell","cell_css":"border: 1px solid #58a; margin: 2px;","cell_type":"code","contents_keyword":"installPackages","first_line":"# List all non-standard packages to be imported by your","label":"deps"}},"outputs":[],"source":["from ast import Delete\n","from ayx import Package\n","try:\n","    Package.installPackages(package=['pandas','PyPDF2'], install_type=\"install --user\")\n","except:\n","    pass"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["from ayx import Alteryx\n","import pandas as pd\n","from PyPDF2 import PdfMerger,PdfReader\n","import os\n","merger = PdfMerger(strict=False)\n","\n","# 建立pandas表格資料,最後輸出該表\n","resultTemplate = {\n","    \"Status\":[\"\"],\n","    \"Message\":\"\",\n","    \"Output Path\":\"\"\n","}\n","resultData = pd.DataFrame(resultTemplate)\n","\n","try: \n","    # 讀取前端所選PDF檔案路徑\n","    data = Alteryx.read(\"#1\")\n","    file_list = data['file_list']\n","    # 讀取欲儲存的結果檔案資料夾\n","    output_dir = Alteryx.read(\"#2\")\n","    output_dir = output_dir['output_dir'].iloc[0]\n","    output_path=\"\"\n","    if(output_dir and os.path.isdir(output_dir)):\n","        # 結果檔名判斷，若已存在則補序號\n","        output_path = os.path.join(output_dir,\"merge_result.pdf\")\n","        file = os.path.splitext(output_path)[0]\n","        ext = os.path.splitext(output_path)[1]   \n","        i = 2\n","        while os.path.exists(output_path):\n","            output_path = f'{file}({i}){ext}'\n","            i += 1\n","    else:\n","        raise Exception(\"儲存目的資料夾路徑不存在，請確認後再重新執行 ! \")\n","\n","# 主程式       \n","    for i in range(len(file_list)):\n","#       未輸入的欄位則跳過\n","        if(not file_list[i]):\n","            continue\n","        \n","#       檔案若存在則合併,反之則標示錯誤並顯示錯誤訊息\n","        isExist = os.path.exists(file_list[i])\n","        if(isExist == True):\n","            reader = PdfReader(open(file_list[i],\"rb\"))\n","            merger.append(reader)\n","        else:\n","            raise Exception(\"該檔案不存在! \" + file_list[i])\n","            \n","    # Write to an output PDF document\n","    merger.write(open(output_path, 'wb'))\n","    resultData.at[0, \"Status\"] = \"Success\"\n","    resultData.at[0, \"Message\"] = \"-\"\n","    resultData.at[0, \"Output Path\"] = output_path\n","except Exception as e:\n","    resultData.at[0, \"Status\"] = \"Failure\"\n","    resultData.at[0, \"Message\"] = \"Alteryx 解析 PDF 過程發生錯誤，請與 AI&T 同仁聯繫(\"+str(e)+\")\"\n","    resultData.at[0, \"Output Path\"] = \"-\"\n","    if(output_path and os.path.exists(output_path)):\n","        os.remove(output_path)\n","Alteryx.write(resultData,1)\n","# Copyright © 2001-2022 Python Software Foundation; All Rights Reserved."]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"jupytertool_venv","language":"python","name":"jupytertool_venv"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.5"}},"nbformat":4,"nbformat_minor":2}]]></Notebook>
        </Configuration>
        <Annotation DisplayMode="0">
          <Name />
          <DefaultAnnotationText />
          <Left value="False" />
        </Annotation>
      </Properties>
      <EngineSettings EngineDll="AlteryxJupyterPluginEngine.dll" EngineDllEntryPoint="AlteryxJupyter" />
    </Node>
  </Nodes>
  <Connections>
    <Connection name="#1">
      <Origin ToolID="2" Connection="Output" />
      <Destination ToolID="6" Connection="Input" />
    </Connection>
    <Connection name="#1">
      <Origin ToolID="4" Connection="Question" />
      <Destination ToolID="5" Connection="Question" />
    </Connection>
    <Connection name="#2">
      <Origin ToolID="5" Connection="Action" />
      <Destination ToolID="7" Connection="Action" />
    </Connection>
    <Connection>
      <Origin ToolID="6" Connection="Output1" />
      <Destination ToolID="3" Connection="Input" />
    </Connection>
  </Connections>
  <Properties>
    <Memory default="True" />
    <GlobalRecordLimit value="0" />
    <TempFiles default="True" />
    <Annotation on="True" includeToolName="False" />
    <ConvErrorLimit value="10" />
    <ConvErrorLimit_Stop value="False" />
    <CancelOnError value="False" />
    <DisableBrowse value="False" />
    <EnablePerformanceProfiling value="False" />
    <DisableAllOutput value="False" />
    <ShowAllMacroMessages value="False" />
    <ShowConnectionStatusIsOn value="True" />
    <ShowConnectionStatusOnlyWhenRunning value="True" />
    <ZoomLevel value="0" />
    <LayoutType>Horizontal</LayoutType>
    <Constants>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>Macro Input (2)</Name>
        <Value />
        <IsNumeric value="False" />
      </Constant>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>Macro Output (3)</Name>
        <Value />
        <IsNumeric value="False" />
      </Constant>
      <Constant>
        <Namespace>Question</Namespace>
        <Name>ControlParam.Control Parameter (4)</Name>
        <Value />
        <IsNumeric value="False" />
      </Constant>
    </Constants>
    <MetaInfo>
      <NameIsFileName value="True" />
      <Name>python</Name>
      <Description />
      <RootToolName />
      <ToolVersion />
      <ToolInDb value="False" />
      <CategoryName />
      <SearchTags />
      <Author />
      <Company />
      <Copyright />
      <DescriptionLink actual="" displayed="" />
      <Example>
        <Description />
        <File />
      </Example>
    </MetaInfo>
    <Events>
      <Enabled value="False" />
    </Events>
    <RuntimeProperties>
      <Actions>
        <NoCondition>
          <Type>NoCondition</Type>
          <Description>(Always Run)</Description>
          <True>
            <Action>
              <Type>UpdateValueFormula</Type>
              <Description />
              <ToolId value="5" />
              <Expression>[Destination]=[#1]</Expression>
              <Destination>7/Disabled/@value</Destination>
              <Mode>Expression</Mode>
            </Action>
          </True>
        </NoCondition>
      </Actions>
      <Questions>
        <Question>
          <Type>Tab</Type>
          <Description>Questions</Description>
          <Name>Tab (1)</Name>
          <ToolId value="1" />
          <Questions>
            <Question>
              <Type>MacroInput</Type>
              <Description />
              <Name>Macro Input (2)</Name>
              <ToolId value="2" />
            </Question>
            <Question>
              <Type>MacroOutput</Type>
              <Description />
              <Name>Macro Output (3)</Name>
              <ToolId value="3" />
            </Question>
            <Question>
              <Type>ControlParam</Type>
              <Description>runpython</Description>
              <Name>Control Parameter (4)</Name>
              <ToolId value="4" />
            </Question>
          </Questions>
        </Question>
      </Questions>
      <ModuleType>Macro</ModuleType>
      <MacroCustomHelp value="False" />
      <MacroDynamicOutputFields value="False" />
      <MacroImageStd value="39" />
      <MacroInputs />
      <MacroOutputs />
      <BatchMacro>
        <OutputMode>AllSame</OutputMode>
        <ControlParams>
          <ControlParam>
            <Name>Control Parameter (4)</Name>
            <Description>runpython</Description>
          </ControlParam>
        </ControlParams>
      </BatchMacro>
      <Wiz_CustomHelp value="False" />
      <Wiz_CustomGraphic value="False" />
      <Wiz_ShowOutput value="True" />
      <Wiz_OpenOutputTools>
        <Tool ToolId="2" Selected="True" />
        <Tool ToolId="3" Selected="True" />
      </Wiz_OpenOutputTools>
      <Wiz_OutputMessage />
      <Wiz_NoOutputFilesMessage />
      <Wiz_ChainRunWizard />
    </RuntimeProperties>
  </Properties>
</AlteryxDocument>